// ---------- Encabezado obligatorio ----------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- Enums ----------
enum NominaStatus {
  PendienteAuditoria
  Auditada
  Contabilizada
  Anulada
}

// ---------- Bases / referencias mínimas ----------
model Empresa {
  id           Int                  @id @default(autoincrement())
  nombre       String
  rnc          String               @unique
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt

  clientes      Cliente[]
  empleados     Empleado[]
  recurrencias  FacturaRecurrente[]
  nominas       Nomina[]
  asientos      AsientoContable[]
  bankTx        BankTransaction[]
  matches       ReconciliationMatch[]
  subscription  Subscription?
  moduleUsage   ModuleUsage[]
}

model Cliente {
  id           Int                  @id @default(autoincrement())
  empresaId    Int
  empresa      Empresa              @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  nombre       String
  rnc          String?
  email        String?
  telefono     String?
  direccion    String?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt

  recurrencias FacturaRecurrente[]

  @@index([empresaId])
}

// ---------- Lo que pediste ----------
model FacturaRecurrente {
  id          Int       @id @default(autoincrement())
  empresaId   Int
  empresa     Empresa   @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  clienteId   Int
  cliente     Cliente   @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  descripcion String
  monto       Decimal   @db.Decimal(12, 2)
  frecuencia  String    // e.g., "mensual"
  nextDate    DateTime
  activa      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([empresaId])
  @@index([clienteId])
}

model Empleado {
  id                  Int       @id @default(autoincrement())
  empresaId           Int
  empresa             Empresa   @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  nombre              String
  cedula              String    @unique
  puesto              String
  salarioBrutoMensual Decimal   @db.Decimal(12, 2)
  fechaIngreso        DateTime
  activo              Boolean   @default(true)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@index([empresaId])
}

model Nomina {
  id            String       @id // YYYY-MM
  empresaId     Int
  empresa       Empresa      @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  periodo       String       // YYYY-MM
  empleadosJson Json         // arreglo de NominaEmpleado
  totalPagado   Decimal      @db.Decimal(12, 2)
  totalCostoEmp Decimal      @db.Decimal(12, 2)
  status        NominaStatus @default(PendienteAuditoria)
  asientoId     String?
  generadoPor   Json
  auditTrail    Json?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([empresaId])
}

model AsientoContable {
  id              String    @id
  empresaId       Int
  empresa         Empresa   @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  fecha           DateTime
  descripcion     String
  transaccionId   String
  transaccionTipo String
  entradas        Json      // [{ cuentaId, descripcion, debito, credito }]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([empresaId])
}

model BankTransaction {
  id          String   @id
  empresaId   Int
  empresa     Empresa  @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  fecha       DateTime
  descripcion String
  monto       Decimal  @db.Decimal(12, 2)
  tipo        String   // "credito" | "debito"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  matches     ReconciliationMatch[]

  @@index([empresaId])
}

model ReconciliationMatch {
  id                Int             @id @default(autoincrement())
  empresaId         Int
  empresa           Empresa         @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  bankTransactionId String
  bankTransaction   BankTransaction @relation(fields: [bankTransactionId], references: [id], onDelete: Cascade)
  recordType        String          // 'factura' | 'gasto' | 'ingreso'
  recordId          Int
  status            String          // 'sugerido' | 'confirmado'
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@index([empresaId])
  @@index([bankTransactionId])
}

// ---------- Sistema de Suscripciones y Módulos ----------

enum PlanType {
  BASICO
  PRO 
  PREMIUM
}

enum ModuleStatus {
  ACTIVE
  INACTIVE
  TRIAL
  EXPIRED
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  PAST_DUE
  TRIAL
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  AZUL
  CARDNET
  VISANET
}

model SubscriptionPlan {
  id            String        @id @default(cuid())
  name          String        @unique
  planType      PlanType
  price         Decimal       @db.Decimal(10, 2)
  currency      String        @default("DOP")
  billingCycle  String        // 'monthly', 'yearly'
  trialDays     Int           @default(30)
  description   String?
  features      Json          // JSON con características del plan
  active        Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  subscriptions Subscription[]
  modules       PlanModule[]

  @@map("subscription_plans")
}

model Module {
  id          String        @id @default(cuid())
  name        String        @unique
  displayName String
  description String?
  category    String        // 'facturacion', 'contabilidad', 'nomina', etc.
  basePrice   Decimal       @db.Decimal(10, 2)
  currency    String        @default("DOP")
  isCore      Boolean       @default(false) // módulos principales incluidos en todos los planes
  features    Json?         // funcionalidades específicas del módulo
  settings    Json?         // configuraciones del módulo
  active      Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  planModules         PlanModule[]
  subscriptionModules SubscriptionModule[]
  usageTracking       ModuleUsage[]

  @@map("modules")
}

model PlanModule {
  id         String           @id @default(cuid())
  planId     String
  plan       SubscriptionPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  moduleId   String
  module     Module           @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  included   Boolean          @default(true) // si está incluido en el plan base
  extraPrice Decimal?         @db.Decimal(10, 2) // precio adicional si no está incluido
  maxUsage   Int?             // límite de uso (ej: cantidad de facturas)
  createdAt  DateTime         @default(now())

  @@unique([planId, moduleId])
  @@map("plan_modules")
}

model Subscription {
  id                String             @id @default(cuid())
  empresaId         Int                @unique
  empresa           Empresa            @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  planId            String
  plan              SubscriptionPlan   @relation(fields: [planId], references: [id])
  status            SubscriptionStatus @default(TRIAL)
  currentPeriodStart DateTime
  currentPeriodEnd  DateTime
  trialEnd          DateTime?
  cancelAtPeriodEnd Boolean            @default(false)
  metadata          Json?              // información adicional
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  modules       SubscriptionModule[]
  payments      Payment[]
  invoices      SubscriptionInvoice[]

  @@map("subscriptions")
}

model SubscriptionModule {
  id              String       @id @default(cuid())
  subscriptionId  String
  subscription    Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  moduleId        String
  module          Module       @relation(fields: [moduleId], references: [id])
  status          ModuleStatus @default(ACTIVE)
  activatedAt     DateTime     @default(now())
  expiresAt       DateTime?
  additionalPrice Decimal?     @db.Decimal(10, 2) // precio adicional por este módulo
  settings        Json?        // configuraciones específicas del módulo para esta suscripción
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@unique([subscriptionId, moduleId])
  @@map("subscription_modules")
}

model Payment {
  id                String        @id @default(cuid())
  subscriptionId    String
  subscription      Subscription  @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  amount            Decimal       @db.Decimal(10, 2)
  currency          String        @default("DOP")
  paymentMethod     PaymentMethod
  status            PaymentStatus @default(PENDING)
  stripePaymentId   String?       // ID del payment intent en Stripe
  azulTransactionId String?       // ID de transacción en Azul
  cardLast4         String?       // últimos 4 dígitos de la tarjeta
  cardBrand         String?       // visa, mastercard, etc.
  failureReason     String?       // razón del fallo si aplica
  processedAt       DateTime?
  nextRetryAt       DateTime?     // para reintentos automáticos
  retryCount        Int           @default(0)
  metadata          Json?         // información adicional del procesador de pagos
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  invoice SubscriptionInvoice?

  @@map("payments")
}

model SubscriptionInvoice {
  id             String       @id @default(cuid())
  subscriptionId String
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  paymentId      String?      @unique
  payment        Payment?     @relation(fields: [paymentId], references: [id])
  invoiceNumber  String       @unique
  amount         Decimal      @db.Decimal(10, 2)
  currency       String       @default("DOP")
  itbis          Decimal      @db.Decimal(10, 2) // ITBIS (18% en RD)
  totalAmount    Decimal      @db.Decimal(10, 2)
  periodStart    DateTime
  periodEnd      DateTime
  dueDate        DateTime
  paidAt         DateTime?
  items          Json         // desglose de items facturados
  ncf            String?      // Número de Comprobante Fiscal (requerido en RD)
  ncfSequence    String?      // Secuencia del NCF
  dgiiReported   Boolean      @default(false) // si fue reportado a la DGII
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("subscription_invoices")
}

model ModuleUsage {
  id         String   @id @default(cuid())
  empresaId  Int
  empresa    Empresa  @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  moduleId   String
  module     Module   @relation(fields: [moduleId], references: [id])
  usageType  String   // 'api_call', 'document', 'transaction', etc.
  quantity   Int      @default(1)
  metadata   Json?    // información adicional sobre el uso
  recordedAt DateTime @default(now())

  @@index([empresaId, moduleId, recordedAt])
  @@map("module_usage")
}

model LandingConfig {
  id               Int      @id @default(autoincrement())
  heroTitle        String
  heroSubtitle     String
  heroButtonText   String
  pricingTitle     String
  pricingSubtitle  String
  trialDays        Int      @default(30)
  moduleTrialDays  Int      @default(7)
  supportEmail     String
  supportPhone     String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("landing_config")
}
