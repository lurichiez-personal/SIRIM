// ---------- Encabezado obligatorio ----------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- Enums ----------
enum NominaStatus {
  PendienteAuditoria
  Auditada
  Contabilizada
  Anulada
}

// ---------- Bases / referencias mínimas ----------
model Empresa {
  id           Int                  @id @default(autoincrement())
  nombre       String
  rnc              String               @unique
  stripeCustomerId String?              @unique // ID del cliente en Stripe
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt

  clientes      Cliente[]
  empleados     Empleado[]
  recurrencias  FacturaRecurrente[]
  nominas       Nomina[]
  asientos      AsientoContable[]
  bankTx        BankTransaction[]
  matches       ReconciliationMatch[]
  subscription  Subscription?
  moduleUsage   ModuleUsage[]
  metasVentas   MetaVentas[]
  usuarios      UserEmpresa[]
  suscripcion   Suscripcion?
}

model Cliente {
  id           Int                  @id @default(autoincrement())
  empresaId    Int
  empresa      Empresa              @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  nombre       String
  rnc          String?
  email        String?
  telefono     String?
  direccion    String?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt

  recurrencias FacturaRecurrente[]

  @@index([empresaId])
}

// ---------- Lo que pediste ----------
model FacturaRecurrente {
  id          Int       @id @default(autoincrement())
  empresaId   Int
  empresa     Empresa   @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  clienteId   Int
  cliente     Cliente   @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  descripcion String
  monto       Decimal   @db.Decimal(12, 2)
  frecuencia  String    // e.g., "mensual"
  nextDate    DateTime
  activa      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([empresaId])
  @@index([clienteId])
}

model Empleado {
  id                  Int       @id @default(autoincrement())
  empresaId           Int
  empresa             Empresa   @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  nombre              String
  cedula              String    @unique
  puesto              String
  salarioBrutoMensual Decimal   @db.Decimal(12, 2)
  fechaIngreso        DateTime
  activo              Boolean   @default(true)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@index([empresaId])
}

model Nomina {
  id            String       @id // YYYY-MM
  empresaId     Int
  empresa       Empresa      @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  periodo       String       // YYYY-MM
  empleadosJson Json         // arreglo de NominaEmpleado
  totalPagado   Decimal      @db.Decimal(12, 2)
  totalCostoEmp Decimal      @db.Decimal(12, 2)
  status        NominaStatus @default(PendienteAuditoria)
  asientoId     String?
  generadoPor   Json
  auditTrail    Json?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([empresaId])
}

model AsientoContable {
  id              String    @id
  empresaId       Int
  empresa         Empresa   @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  fecha           DateTime
  descripcion     String
  transaccionId   String
  transaccionTipo String
  entradas        Json      // [{ cuentaId, descripcion, debito, credito }]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([empresaId])
}

model BankTransaction {
  id          String   @id
  empresaId   Int
  empresa     Empresa  @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  fecha       DateTime
  descripcion String
  monto       Decimal  @db.Decimal(12, 2)
  tipo        String   // "credito" | "debito"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  matches     ReconciliationMatch[]

  @@index([empresaId])
}

model ReconciliationMatch {
  id                Int             @id @default(autoincrement())
  empresaId         Int
  empresa           Empresa         @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  bankTransactionId String
  bankTransaction   BankTransaction @relation(fields: [bankTransactionId], references: [id], onDelete: Cascade)
  recordType        String          // 'factura' | 'gasto' | 'ingreso'
  recordId          Int
  status            String          // 'sugerido' | 'confirmado'
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@index([empresaId])
  @@index([bankTransactionId])
}

// ---------- Sistema de Suscripciones y Módulos ----------

enum PlanType {
  BASICO
  PRO 
  PREMIUM
}

enum ModuleStatus {
  ACTIVE
  INACTIVE
  TRIAL
  EXPIRED
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  PAST_DUE
  TRIAL
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  AZUL
  CARDNET
  VISANET
}

model SubscriptionPlan {
  id            String        @id @default(cuid())
  name          String        @unique
  planType      PlanType
  price         Decimal       @db.Decimal(10, 2)
  currency      String        @default("DOP")
  billingCycle  String        // 'monthly', 'yearly'
  trialDays     Int           @default(30)
  description   String?
  features      Json          // JSON con características del plan
  active        Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  subscriptions Subscription[]
  modules       PlanModule[]
  suscripciones Suscripcion[]

  @@map("subscription_plans")
}

model Module {
  id          String        @id @default(cuid())
  name        String        @unique
  displayName String
  description String?
  category    String        // 'facturacion', 'contabilidad', 'nomina', etc.
  basePrice   Decimal       @db.Decimal(10, 2)
  currency    String        @default("DOP")
  isCore      Boolean       @default(false) // módulos principales incluidos en todos los planes
  features    Json?         // funcionalidades específicas del módulo
  settings    Json?         // configuraciones del módulo
  active      Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  planModules         PlanModule[]
  subscriptionModules SubscriptionModule[]
  usageTracking       ModuleUsage[]

  @@map("modules")
}

model PlanModule {
  id         String           @id @default(cuid())
  planId     String
  plan       SubscriptionPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  moduleId   String
  module     Module           @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  included   Boolean          @default(true) // si está incluido en el plan base
  extraPrice Decimal?         @db.Decimal(10, 2) // precio adicional si no está incluido
  maxUsage   Int?             // límite de uso (ej: cantidad de facturas)
  createdAt  DateTime         @default(now())

  @@unique([planId, moduleId])
  @@map("plan_modules")
}

model Subscription {
  id                String             @id @default(cuid())
  empresaId         Int                @unique
  empresa           Empresa            @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  planId               String?
  plan                 SubscriptionPlan?  @relation(fields: [planId], references: [id])
  stripeSubscriptionId String?            @unique // ID de la suscripción en Stripe
  stripePriceId        String?            // ID del precio en Stripe
  trialEndsAt          DateTime?          // Fin del período de prueba
  activatedAt          DateTime?          // Fecha de activación
  cancelledAt          DateTime?          // Fecha de cancelación
  cancellationDate     DateTime?          // Fecha programada de cancelación
  status            SubscriptionStatus @default(TRIAL)
  currentPeriodStart DateTime
  currentPeriodEnd  DateTime
  trialEnd          DateTime?
  cancelAtPeriodEnd Boolean            @default(false)
  metadata          Json?              // información adicional
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  modules       SubscriptionModule[]
  payments      Payment[]
  invoices      SubscriptionInvoice[]

  @@map("subscriptions")
}

model SubscriptionModule {
  id              String       @id @default(cuid())
  subscriptionId  String
  subscription    Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  moduleId        String
  module          Module       @relation(fields: [moduleId], references: [id])
  status          ModuleStatus @default(ACTIVE)
  activatedAt     DateTime     @default(now())
  expiresAt       DateTime?
  additionalPrice Decimal?     @db.Decimal(10, 2) // precio adicional por este módulo
  settings        Json?        // configuraciones específicas del módulo para esta suscripción
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@unique([subscriptionId, moduleId])
  @@map("subscription_modules")
}

model Payment {
  id                String        @id @default(cuid())
  subscriptionId    String
  subscription      Subscription  @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  amount            Decimal       @db.Decimal(10, 2)
  currency          String        @default("DOP")
  paymentMethod     PaymentMethod
  status            PaymentStatus @default(PENDING)
  stripePaymentIntentId String?   // ID del payment intent en Stripe
  stripeInvoiceId      String?   // ID de la factura en Stripe
  azulTransactionId String?       // ID de transacción en Azul
  cardLast4         String?       // últimos 4 dígitos de la tarjeta
  cardBrand         String?       // visa, mastercard, etc.
  failureReason     String?       // razón del fallo si aplica
  processedAt       DateTime?
  nextRetryAt       DateTime?     // para reintentos automáticos
  retryCount        Int           @default(0)
  metadata          Json?         // información adicional del procesador de pagos
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  invoice SubscriptionInvoice?

  @@map("payments")
}

model SubscriptionInvoice {
  id             String       @id @default(cuid())
  subscriptionId String
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  paymentId      String?      @unique
  payment        Payment?     @relation(fields: [paymentId], references: [id])
  invoiceNumber  String       @unique
  amount         Decimal      @db.Decimal(10, 2)
  currency       String       @default("DOP")
  itbis          Decimal      @db.Decimal(10, 2) // ITBIS (18% en RD)
  totalAmount    Decimal      @db.Decimal(10, 2)
  periodStart    DateTime
  periodEnd      DateTime
  dueDate        DateTime
  paidAt         DateTime?
  items          Json         // desglose de items facturados
  ncf            String?      // Número de Comprobante Fiscal (requerido en RD)
  ncfSequence    String?      // Secuencia del NCF
  dgiiReported   Boolean      @default(false) // si fue reportado a la DGII
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("subscription_invoices")
}

model ModuleUsage {
  id         String   @id @default(cuid())
  empresaId  Int
  empresa    Empresa  @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  moduleId   String
  module     Module   @relation(fields: [moduleId], references: [id])
  usageType  String   // 'api_call', 'document', 'transaction', etc.
  quantity   Int      @default(1)
  metadata   Json?    // información adicional sobre el uso
  recordedAt DateTime @default(now())

  @@index([empresaId, moduleId, recordedAt])
  @@map("module_usage")
}

model LandingConfig {
  id               Int      @id @default(autoincrement())
  heroTitle        String
  heroSubtitle     String
  heroButtonText   String
  pricingTitle     String
  pricingSubtitle  String
  trialDays        Int      @default(30)
  moduleTrialDays  Int      @default(7)
  supportEmail     String
  supportPhone     String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("landing_config")
}

// ---------- Metas de Ventas ----------

model MetaVentas {
  id          Int      @id @default(autoincrement())
  empresaId   Int
  empresa     Empresa  @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  ano         Int      // Año de la meta
  mes         Int      // Mes de la meta (1-12)
  metaMensual Decimal  @db.Decimal(12, 2)
  notas       String?  // Notas adicionales sobre la meta
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([empresaId, ano, mes]) // Una meta por empresa por mes
  @@index([empresaId])
  @@map("metas_ventas")
}

// ---------- Sistema Master User y SaaS ----------

// Sistema de usuarios master para administración de clientes
model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  password     String?  // Opcional para OAuth users
  nombre       String
  role         String   @default("client") // "master", "client", "employee"
  active       Boolean  @default(true)
  emailVerified Boolean @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relaciones
  empresas     UserEmpresa[]
  notifications Notification[]
  
  @@index([email])
  @@index([role])
}

// Relación many-to-many entre usuarios y empresas
model UserEmpresa {
  id        Int      @id @default(autoincrement())
  userId    Int
  empresaId Int
  role      String   @default("admin") // "admin", "contador", "operaciones"
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  empresa   Empresa  @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  
  @@unique([userId, empresaId])
  @@index([userId])
  @@index([empresaId])
}

// Sistema de suscripciones mejorado
model Suscripcion {
  id              Int      @id @default(autoincrement())
  empresaId       Int      @unique
  planId          String
  stripeCustomerId String? @unique
  stripeSubscriptionId String? @unique
  status          String   @default("trial") // "trial", "active", "past_due", "canceled", "unpaid"
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  trialEnd        DateTime?
  cancelAt        DateTime?
  canceledAt      DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  empresa         Empresa  @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  plan            SubscriptionPlan @relation(fields: [planId], references: [id])
  pagos           Pago[]
  
  @@index([empresaId])
  @@index([stripeCustomerId])
  @@index([status])
}

// Registro de pagos
model Pago {
  id              Int      @id @default(autoincrement())
  suscripcionId   Int
  stripePaymentIntentId String? @unique
  amount          Decimal  @db.Decimal(10, 2)
  currency        String   @default("USD")
  status          String   // "pending", "succeeded", "failed", "canceled"
  paymentMethod   String?  // "card", "bank_transfer", etc.
  description     String?
  paidAt          DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  suscripcion     Suscripcion @relation(fields: [suscripcionId], references: [id], onDelete: Cascade)
  
  @@index([suscripcionId])
  @@index([status])
  @@index([paidAt])
}

// Configuración de cuentas para recibir pagos
model PaymentConfig {
  id                Int      @id @default(autoincrement())
  stripePublishableKey String?
  stripeSecretKey   String?
  stripeWebhookSecret String?
  sendGridApiKey    String?
  supportEmail      String   @default("soporte@sirim.do")
  bankAccount       String?  // Para transferencias
  paypalAccount     String?  // Para PayPal
  active            Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// Sistema de notificaciones
model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int?     // Null para notificaciones globales
  type      String   // "new_client", "payment_success", "payment_failed", "subscription_canceled"
  title     String
  message   String
  data      String?  // JSON con datos adicionales
  read      Boolean  @default(false)
  emailSent Boolean  @default(false)
  createdAt DateTime @default(now())
  
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([type])
  @@index([read])
  @@index([createdAt])
}

// ---------- MODELOS DE NEGOCIO PRINCIPALES ----------

model Factura {
  id                  Int       @id @default(autoincrement())
  empresaId           Int
  clienteId           Int
  clienteNombre       String
  fecha               DateTime
  subtotal            Decimal   @db.Decimal(12, 2)
  descuentoPorcentaje Decimal?  @db.Decimal(5, 2)
  montoDescuento      Decimal?  @db.Decimal(12, 2)
  aplicaITBIS         Boolean   @default(true)
  itbis               Decimal   @db.Decimal(12, 2)
  aplicaISC           Boolean   @default(false)
  isc                 Decimal?  @db.Decimal(12, 2)
  aplicaPropina       Boolean   @default(false)
  propinaLegal        Decimal?  @db.Decimal(12, 2)
  montoTotal          Decimal   @db.Decimal(12, 2)
  montoPagado         Decimal   @db.Decimal(12, 2) @default(0)
  ncf                 String?
  estado              String    @default("Emitida")
  cotizacionId        Int?
  facturaRecurrenteId Int?
  conciliado          Boolean   @default(false)
  comments            Json      @default("[]")
  auditLog            Json      @default("[]")
  asientoId           String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  items    FacturaItem[]

  @@index([empresaId])
  @@index([clienteId])
  @@index([fecha])
  @@index([estado])
}

model FacturaItem {
  id             Int     @id @default(autoincrement())
  facturaId      Int
  factura        Factura @relation(fields: [facturaId], references: [id], onDelete: Cascade)
  itemId         Int?
  codigo         String
  descripcion    String
  cantidad       Decimal @db.Decimal(12, 4)
  precioUnitario Decimal @db.Decimal(12, 2)
  subtotal       Decimal @db.Decimal(12, 2)

  @@index([facturaId])
}

model Item {
  id                 Int      @id @default(autoincrement())
  empresaId          Int
  codigo             String
  nombre             String
  descripcion        String?
  precio             Decimal  @db.Decimal(12, 2)
  costo              Decimal? @db.Decimal(12, 2)
  cantidadDisponible Decimal? @db.Decimal(12, 4)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([empresaId])
  @@unique([empresaId, codigo])
}

model Gasto {
  id              Int      @id @default(autoincrement())
  empresaId       Int
  proveedorNombre String?
  rncProveedor    String?
  categoriaGasto  String?
  fecha           DateTime
  subtotal        Decimal  @db.Decimal(12, 2)
  itbis           Decimal  @db.Decimal(12, 2)
  isc             Decimal? @db.Decimal(12, 2)
  propinaLegal    Decimal? @db.Decimal(12, 2)
  monto           Decimal  @db.Decimal(12, 2)
  ncf             String?
  descripcion     String
  conciliado      Boolean  @default(false)
  aplicaITBIS     Boolean  @default(true)
  metodoPago      String?
  comments        Json     @default("[]")
  auditLog        Json     @default("[]")
  asientoId       String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([empresaId])
  @@index([fecha])
}

model Ingreso {
  id              Int      @id @default(autoincrement())
  empresaId       Int
  clienteNombre   String?
  rncCliente      String?
  categoriaIngreso String?
  fecha           DateTime
  subtotal        Decimal  @db.Decimal(12, 2)
  itbis           Decimal  @db.Decimal(12, 2)
  isc             Decimal? @db.Decimal(12, 2)
  propinaLegal    Decimal? @db.Decimal(12, 2)
  monto           Decimal  @db.Decimal(12, 2)
  ncf             String?
  descripcion     String
  conciliado      Boolean  @default(false)
  aplicaITBIS     Boolean  @default(true)
  metodoCobro     String?
  comments        Json     @default("[]")
  auditLog        Json     @default("[]")
  asientoId       String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([empresaId])
  @@index([fecha])
}

model Cotizacion {
  id                  Int      @id @default(autoincrement())
  empresaId           Int
  clienteId           Int
  clienteNombre       String
  fecha               DateTime
  validaHasta         DateTime?
  subtotal            Decimal  @db.Decimal(12, 2)
  descuentoPorcentaje Decimal? @db.Decimal(5, 2)
  montoDescuento      Decimal? @db.Decimal(12, 2)
  aplicaITBIS         Boolean  @default(true)
  itbis               Decimal  @db.Decimal(12, 2)
  aplicaISC           Boolean  @default(false)
  isc                 Decimal? @db.Decimal(12, 2)
  aplicaPropina       Boolean  @default(false)
  propinaLegal        Decimal? @db.Decimal(12, 2)
  montoTotal          Decimal  @db.Decimal(12, 2)
  estado              String   @default("Pendiente") // "Pendiente", "Aceptada", "Rechazada", "Facturada"
  comments            Json     @default("[]")
  auditLog            Json     @default("[]")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  items CotizacionItem[]

  @@index([empresaId])
  @@index([clienteId])
  @@index([fecha])
  @@index([estado])
}

model CotizacionItem {
  id             Int        @id @default(autoincrement())
  cotizacionId   Int
  cotizacion     Cotizacion @relation(fields: [cotizacionId], references: [id], onDelete: Cascade)
  itemId         Int?
  codigo         String
  descripcion    String
  cantidad       Decimal    @db.Decimal(12, 4)
  precioUnitario Decimal    @db.Decimal(12, 2)
  subtotal       Decimal    @db.Decimal(12, 2)

  @@index([cotizacionId])
}

model NotaCreditoDebito {
  id           Int      @id @default(autoincrement())
  empresaId    Int
  clienteId    Int
  facturaId    Int?     // Factura de referencia (opcional)
  tipo         String   // "credito" o "debito"
  fecha        DateTime
  subtotal     Decimal  @db.Decimal(12, 2)
  aplicaITBIS  Boolean  @default(true)
  itbis        Decimal  @db.Decimal(12, 2)
  montoTotal   Decimal  @db.Decimal(12, 2)
  ncf          String?
  motivo       String
  descripcion  String
  estado       String   @default("Emitida")
  comments     Json     @default("[]")
  auditLog     Json     @default("[]")
  asientoId    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([empresaId])
  @@index([clienteId])
  @@index([facturaId])
  @@index([fecha])
  @@index([tipo])
}

// ---------- CONFIGURACIÓN DE CORREO ----------

enum EmailProvider {
  GMAIL
  OUTLOOK
  OFFICE365
  SENDGRID
  CUSTOM_SMTP
}

model EmailConfig {
  id           Int           @id @default(autoincrement())
  name         String        // Nombre descriptivo de la configuración
  provider     EmailProvider
  isDefault    Boolean       @default(false) // Solo una configuración puede ser default
  isActive     Boolean       @default(true)
  
  // Configuración SMTP general
  smtpHost     String?
  smtpPort     Int?
  smtpSecure   Boolean       @default(true) // TLS/SSL
  
  // Credenciales de autenticación
  email        String        // Email del remitente
  password     String?       // Password o App Password (encriptado)
  clientId     String?       // Para OAuth (Gmail, Office365)
  clientSecret String?       // Para OAuth
  accessToken  String?       // Token de acceso OAuth
  refreshToken String?       // Token de refresco OAuth
  
  // SendGrid específico
  apiKey       String?       // API Key para SendGrid
  
  // Configuración adicional
  fromName     String        @default("SIRIM") // Nombre del remitente
  replyTo      String?       // Email de respuesta
  templates    Json?         // Templates de correo personalizados
  settings     Json?         // Configuraciones específicas del proveedor
  
  // Metadatos
  lastUsedAt   DateTime?
  errorCount   Int           @default(0)
  lastError    String?
  
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@unique([email, provider])
  @@index([isDefault])
  @@index([isActive])
  @@map("email_configs")
}
